#![allow(private_bounds, private_interfaces)]
#![doc = include_str!("../README.md")]

extern crate self as rust_query;

#[macro_use]
extern crate static_assertions;

mod alias;
mod ast;
mod db;
mod dummy_impl;
mod hash;
mod migrate;
mod mymap;
mod query;
mod rows;
mod schema_pragma;
mod transaction;
mod value;
mod writable;

pub use db::TableRow;
pub use dummy_impl::{IntoSelect, Select};
use hash::TypBuilder;
use private::Reader;
pub use rust_query_macros::{FromExpr, Select};
pub use transaction::{Database, Transaction, TransactionWeak};
use value::MyTyp;
pub use value::aggregate::aggregate;
pub use value::trivial::FromExpr;
pub use value::{Expr, IntoExpr, UnixEpoch, optional::optional};
pub use writable::Update;

use crate::alias::JoinableTable;

/// Types that are used as closure arguments.
///
/// You generally don't need to import these types.
pub mod args {
    pub use crate::query::Query;
    pub use crate::rows::Rows;
    pub use crate::value::aggregate::Aggregate;
    pub use crate::value::optional::Optional;
}

/// Types to declare schemas and migrations.
///
/// A good starting point is too look at [crate::migration::schema].
pub mod migration {
    #[cfg(feature = "dev")]
    pub use crate::hash::dev::hash_schema;
    pub use crate::migrate::{Config, Migrated, Migrator, Synchronous, TransactionMigrate};
    pub use rust_query_macros::schema;
}

/// These items are only exposed for use by the proc macros.
/// Direct use is unsupported.
#[doc(hidden)]
pub mod private {
    use std::marker::PhantomData;

    pub use crate::hash::TypBuilder;
    pub use crate::migrate::{Migration, Schema, SchemaBuilder, SchemaMigration, TableTypBuilder};
    pub use crate::query::get_plan;
    pub use crate::value::{
        MyTyp, Typed, ValueBuilder, adhoc_expr, assume_expr, into_owned, new_column, new_dummy,
    };
    pub use crate::writable::{Reader, TableInsert};

    pub use rust_query_macros::fields;

    pub struct Native;
    pub struct Ignore;
    pub struct Custom<T>(PhantomData<T>);
    pub struct AsUpdate;
    pub struct AsExpr<'t>(PhantomData<&'t ()>);

    pub trait Apply {
        type Out<T: MyTyp, S>;
    }

    impl Apply for Native {
        type Out<T: MyTyp, S> = T::Out;
    }

    impl Apply for Ignore {
        type Out<T: MyTyp, S> = ();
    }

    impl<X> Apply for Custom<X> {
        type Out<T: MyTyp, S> = X;
    }

    impl Apply for AsUpdate {
        type Out<T: MyTyp, S> = crate::Update<S, T>;
    }

    impl<'t> Apply for AsExpr<'t> {
        type Out<T: MyTyp, S> = crate::Expr<'t, S, T>;
    }

    pub trait Instantiate<const STRUCT_ID: usize, Params> {
        type Out;
    }

    pub trait UpdateOrUnit<S, T>: Default {}
    impl<S, T: MyTyp> UpdateOrUnit<S, T> for crate::Update<S, T> {}
    impl<S, T> UpdateOrUnit<S, T> for () {}

    pub mod doctest {
        use crate::{Database, Transaction, migrate::Config, migration};

        #[migration::schema(Empty)]
        pub mod vN {
            pub struct User {
                #[unique]
                pub name: String,
            }
        }
        pub use v0::*;

        pub fn get_txn(f: impl Send + FnOnce(&'static mut Transaction<Empty>)) {
            let db = Database::migrator(Config::open_in_memory())
                .unwrap()
                .finish()
                .unwrap();
            db.transaction_mut_ok(|txn| {
                txn.insert(User { name: "Alice" }).unwrap();
                f(txn)
            })
        }
    }
}

/// This trait is implemented for all table types as generated by the [crate::migration::schema] macro.
///
/// **You can not implement this trait yourself!**
pub trait Table: Sized + 'static {
    #[doc(hidden)]
    type Ext2<'t>;

    #[doc(hidden)]
    fn covariant_ext<'x, 't>(val: &'x Self::Ext2<'static>) -> &'x Self::Ext2<'t>;

    #[doc(hidden)]
    fn build_ext2<'t>(val: &Expr<'t, Self::Schema, Self>) -> Self::Ext2<'t>;

    #[doc(hidden)]
    const TOKEN: Self;

    /// The schema that this table is a part of.
    type Schema;

    #[doc(hidden)]
    /// The table that this table can be migrated from.
    type MigrateFrom: MyTyp;

    /// The type of conflict that can result from inserting a row in this table.
    /// This is the same type that is used for row updates too.
    type Conflict;

    /// The type of updates used by [Transaction::update_ok].
    type UpdateOk;
    /// The type of updates used by [Transaction::update].
    type Update;
    /// The type of error when a delete fails due to a foreign key constraint.
    type Referer;

    #[doc(hidden)]
    type Insert;

    #[doc(hidden)]
    fn read(val: &Self::Insert, f: &mut Reader<Self::Schema>);

    #[doc(hidden)]
    fn get_conflict_unchecked(
        txn: &Transaction<Self::Schema>,
        val: &Self::Insert,
    ) -> Self::Conflict;

    #[doc(hidden)]
    fn update_into_try_update(val: Self::UpdateOk) -> Self::Update;

    #[doc(hidden)]
    fn apply_try_update(val: Self::Update, old: Expr<'static, Self::Schema, Self>) -> Self::Insert;

    #[doc(hidden)]
    fn get_referer_unchecked() -> Self::Referer;

    // used for the first join (useful for pragmas)
    #[doc(hidden)]
    fn name(&self) -> JoinableTable {
        JoinableTable::Normal(Self::NAME.into())
    }
    #[doc(hidden)]
    fn typs(f: &mut TypBuilder<Self::Schema>);

    #[doc(hidden)]
    const ID: &'static str;
    #[doc(hidden)]
    const NAME: &'static str;
}

#[test]
fn compile_tests() {
    let t = trybuild::TestCases::new();
    t.compile_fail("tests/compile/*.rs");
}
