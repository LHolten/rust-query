error: lifetime may not live long enough
 --> tests/compile/client_get.rs:6:5
  |
5 | fn test<'a>(db: &Client, val: impl Value<'a, Typ = i64>) {
  |         -- lifetime `'a` defined here
6 |     db.get(val);
  |     ^^^^^^^^^^^ requires that `'a` must outlive `'static`
  |
note: due to current limitations in the borrow checker, this implies a `'static` lifetime
 --> src/client.rs
  |
  |     pub fn get<'s, T>(&'s self, val: impl for<'x> FromRow<'x, 's, Out = T>) -> T {
  |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: implementation of `FromRow` is not general enough
 --> tests/compile/client_get.rs:6:5
  |
6 |     db.get(val);
  |     ^^^^^^^^^^^ implementation of `FromRow` is not general enough
  |
  = note: `impl Value<'a, Typ = i64>` must implement `FromRow<'0, '_>`, for any lifetime `'0`...
  = note: ...but it actually implements `FromRow<'1, '_>`, for some specific lifetime `'1`

error[E0308]: mismatched types
 --> tests/compile/client_get.rs:6:5
  |
6 |     db.get(val);
  |     ^^^^^^^^^^^ one type is more general than the other
  |
  = note: expected associated type `<impl Value<'a, Typ = i64> as rust_query::Value<'_>>::Typ`
             found associated type `<impl Value<'a, Typ = i64> as rust_query::Value<'x>>::Typ`
note: the lifetime requirement is introduced here
 --> src/client.rs
  |
  |     pub fn get<'s, T>(&'s self, val: impl for<'x> FromRow<'x, 's, Out = T>) -> T {
  |                                                                   ^^^^^^^
