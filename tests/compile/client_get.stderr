error: lifetime may not live long enough
 --> tests/compile/client_get.rs:6:5
  |
5 | fn test<'a, S>(db: &ReadTransaction<'a, S>, val: impl Value<'a, S, Typ = i64>) {
  |         -- lifetime `'a` defined here
6 |     db.query_one(val);
  |     ^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`
  |
note: due to current limitations in the borrow checker, this implies a `'static` lifetime
 --> src/transaction.rs
  |
  |     pub fn query_one<T>(&self, val: impl for<'x> Dummy<'x, 't, S, Out = T>) -> T {
  |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: implementation of `Dummy` is not general enough
 --> tests/compile/client_get.rs:6:5
  |
6 |     db.query_one(val);
  |     ^^^^^^^^^^^^^^^^^ implementation of `Dummy` is not general enough
  |
  = note: `impl Value<'a, S, Typ = i64>` must implement `Dummy<'0, '_, S>`, for any lifetime `'0`...
  = note: ...but it actually implements `Dummy<'1, '_, S>`, for some specific lifetime `'1`

error[E0308]: mismatched types
 --> tests/compile/client_get.rs:6:5
  |
6 |     db.query_one(val);
  |     ^^^^^^^^^^^^^^^^^ one type is more general than the other
  |
  = note: expected associated type `<impl Value<'a, S, Typ = i64> as rust_query::Value<'_, S>>::Typ`
             found associated type `<impl Value<'a, S, Typ = i64> as rust_query::Value<'x, S>>::Typ`
note: the lifetime requirement is introduced here
 --> src/transaction.rs
  |
  |     pub fn query_one<T>(&self, val: impl for<'x> Dummy<'x, 't, S, Out = T>) -> T {
  |                                                                   ^^^^^^^
