error[E0502]: cannot borrow `txn` as mutable because it is also borrowed as immutable
  --> tests/compile/iterator_invalidation.rs:16:19
   |
16 |         txn.query(|_rows| {
   |         --- ----- ^^^^^^^ mutable borrow occurs here
   |         |   |
   |         |   immutable borrow later used by call
   |         immutable borrow occurs here
17 |             // can not insert inside of `query`
18 |             txn.insert_ok(MyTable { name: "test" });
   |             --- second borrow occurs due to use of `txn` in closure

error: lifetime may not live long enough
  --> tests/compile/iterator_invalidation.rs:27:13
   |
25 |         let names = txn.query(|rows| {
   |                                ----- return type of closure is rust_query::query::Iter<'2, String>
   |                                |
   |                                has type `&mut Query<'_, '1, v0::Schema>`
26 |             let item = rows.join(MyTable);
27 |             rows.into_iter(&item.name)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`
   |
   = note: requirement occurs because of the type `rust_query::query::Iter<'_, String>`, which makes the generic argument `'_` invariant
   = note: the struct `rust_query::query::Iter<'inner, O>` is invariant over the parameter `'inner`
   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
